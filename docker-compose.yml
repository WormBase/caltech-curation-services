version: "3.7"
services:
  db:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: ${PSQL_USERNAME}
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      POSTGRES_DB: ${PSQL_DATABASE}
      POSTGRES_PORT: ${PSQL_PORT}
      TZ: 'America/Los_Angeles'
      PGTZ: 'America/Los_Angeles'
    ports:
      - "${PSQL_PORT}:${PSQL_PORT}"
    command: postgres -c config_file=/etc/postgresql.conf -c hba_file=/etc/pg_hba.conf
    volumes:
      - "./db/postgresql.conf:/etc/postgresql.conf"
      - "./db/pg_hba.conf:/etc/pg_hba.conf"
      - curation_db_storage:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${PSQL_USERNAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - caltech-curation-network
    hostname: curation_db

  postgres_prom_exporter:
    image: wrouesnel/postgres_exporter
    environment:
      DATA_SOURCE_URI: curation_db:${PSQL_PORT}?sslmode=disable
      DATA_SOURCE_USER: ${PSQL_USERNAME}
      DATA_SOURCE_PASS: ${PSQL_PASSWORD}
      TZ: 'America/Los_Angeles'
    depends_on:
      - db
    networks:
      - caltech-curation-network
    hostname: postgres_prom_exporter

  prometheus:
    image: prom/prometheus
    volumes:
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    depends_on:
      - postgres_prom_exporter
    networks:
      - caltech-curation-network
    environment:
      TZ: 'America/Los_Angeles'
    hostname: prometheus

  grafana:
    image: grafana/grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana_storage:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    depends_on:
      - db
      - prometheus
    networks:
      - caltech-curation-network
    environment:
      TZ: 'America/Los_Angeles'

  curation:
    build:
      context: .
      dockerfile: curation/Dockerfile
      args:
        SSH_ACEDB_PASSWORD: "${SSH_ACEDB_PASSWORD}"
        CALTECH_CURATION_FILES_INTERNAL_PATH: "${CALTECH_CURATION_FILES_INTERNAL_PATH}"
    environment:
      DISPLAY: ${DISPLAY}
      CALTECH_CURATION_FILES_INTERNAL_PATH: "${CALTECH_CURATION_FILES_INTERNAL_PATH}"
      HOST_NAME: "${HOST_NAME}"
      SSL_PORT: "${SSL_PORT}"
    ports:
      - "${CURATION_FORMS_PORT}:80"
      - "${SSL_PORT}:${SSL_PORT}"
      - "${SSH_PORT}:22"
    volumes:
      - "${HTTPD_AUTH_FILE_PATH}:/etc/httpd/passwd/passwords"
      - ./curation/website/pub:/usr/lib/pub/
      - ./curation/website/priv:/usr/lib/priv/
      - ./curation/scripts/:/usr/lib/scripts/
      - ./curation/user_files/:/usr/lib/user_files/
      - .env:/usr/lib/.env
      - /tmp/.X11-unix:/tmp/.X11-unix
      - "${SSL_CERTIFICATE_DIR}:/etc/ssl_certificate"
      - "${CALTECH_CURATION_FILES_EXTERNAL_PATH}:${CALTECH_CURATION_FILES_INTERNAL_PATH}"
    networks:
      - caltech-curation-network
    hostname: curation

  acedb:
    # run 'xhost +local:root' on the host to give the right permissions to the instance
    build:
      context: acedb
      dockerfile: Dockerfile
      args:
        CALTECH_CURATION_FILES_INTERNAL_PATH: "${CALTECH_CURATION_FILES_INTERNAL_PATH}"
    environment:
      - DISPLAY=${DISPLAY}
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - "${CALTECH_CURATION_FILES_EXTERNAL_PATH}:${CALTECH_CURATION_FILES_INTERNAL_PATH}"
    network_mode: host

networks:
  caltech-curation-network:
    name: caltech-curation-network

volumes:
  grafana_storage:
  curation_db_storage:
